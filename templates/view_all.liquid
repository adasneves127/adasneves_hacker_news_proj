<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>View Data</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js" integrity="sha512-bcfltY+lNLlNxz38yBBm/HLaUB1gTV6I0e+fahbF9pS6roIdzUytozWdnFV8ZnM6cSAG5EbmO0ag0a/fLZSG4Q==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <script>
      function filterData() {

// Do refresh with URL parameters.
        const lSalary = document.getElementById("lSalary").value;
        const hSalary = document.getElementById("hSalary").value;
        const isRemote = document.getElementById("isRemote").checked;
        const raw_unix_date_after = + new Date(document.getElementById("posted_on").value)
        const str_date_after = String(!isNaN(raw_unix_date_after) ? raw_unix_date_after : "" );
        const post_after = str_date_after.slice(0, 10);

        const raw_unix_date_before = + new Date(document.getElementById("posted_before").value)
        const str_date_before = String(!isNaN(raw_unix_date_before) ? raw_unix_date_before : "" );
        const post_before = str_date_before.slice(0, 10);

        const keyword_text = document.getElementById('keywords').value

        let url = `http://localhost:5000/view?lSalary=${lSalary}&hSalary=${hSalary}&isRemote=${isRemote}&keywords=${keyword_text}`;
        if (!isNaN(post_after)) {
          url += `&post_by=${post_after}`;
        }
      
        if (!isNaN(post_before)) {
          url += `&post_before=${post_before}`;
        }
      window.location.href = url;
    }

    function load_boxes() {

// Load the filters from the URL parameters.
      const urlParams = new URLSearchParams(window.location.search);
      const lSalary = urlParams.get('lSalary');
      const hSalary = urlParams.get('hSalary');
      const keywords = urlParams.get('keywords');
      const isRemote = (urlParams.get('isRemote') === 'true');

      document.getElementById("lSalary").value = lSalary;
      document.getElementById("hSalary").value = hSalary;
      document.getElementById("isRemote").checked = isRemote;
      document.getElementById("keywords").value = keywords;

      let intDateAfter = parseInt(urlParams.get('post_by')) 
      if(intDateAfter == 0 || isNaN(intDateAfter)){
        document.getElementById("posted_before").value = new Date().toISOString().split('T')[0]
      } else {
        let date_after = new Date(intDateAfter * 1000);
        document.getElementById("posted_on").value = date_after.toISOString().split('T')[0]
      }

      let intDateBefore = parseInt(urlParams.get('post_before')) 
      if(intDateBefore == 0 || isNaN(intDateBefore)){
        document.getElementById("posted_before").value = new Date().toISOString().split('T')[0]
      } else {
        let date_before = new Date(intDateBefore * 1000);
        document.getElementById("posted_before").value = date_before.toISOString().split('T')[0]
      }
    }
    function setup(){
      let screen_width = window.screen.width
      let canvas = createCanvas(screen_width / 2 - 40, 400)
      canvas.parent("graph")
    }


    function draw(){
      background(214, 48, 112);
      let margin_x = 40;
      let margin_y = 40;

      line(margin_x, 0, margin_x, height - margin_y)
      line(margin_x, height - margin_y, width, height-margin_y)
      table_data = {}
      // Iterate through the table, and get the date posted.
      table = document.getElementById("data_table")
      for (let i = 1; i < table.rows.length; i++) {
        let row = table.rows[i]
        let date_posted = row.cells[2].innerText
        let date_posted_unix = new Date(date_posted)
        // We only care about month and year
        let month_year = date_posted_unix.getMonth() + 1 + "-" + date_posted_unix.getFullYear()
        if (month_year in table_data) {
          table_data[month_year] += 1
        } else {
          table_data[month_year] = 1
        }
      }

      // Create a bar graph of the data using p5.js
      let max_value = Math.max(...Object.values(table_data))
      table_len = Object.keys(table_data).length
      for(let i = 0; i < table_len; i++){
        let key = Object.keys(table_data)[i]
        let value = table_data[key]
        let col_width = (width - margin_x) / table_len
        let x = margin_x + (i * col_width )
        let y = height - margin_y - (value * (height - margin_y) / max_value)
        fill(0x26, 0x91, 0xF1)
        rect(x, y, col_width , value * (height - margin_y) / max_value)
        fill(0)
        text(key, x + col_width / 8, height - margin_y + 20)
      }
      fill(0)
      let step = Math.floor(max_value / Math.log(max_value))

      // Draw a scale for the y-axis
      for(let i = 0; i <= max_value; i+=step){
        let x = margin_x - 20
        let y = height - margin_y - (i * (height - margin_y) / max_value)
        text(i, x, y)
      }

    }
    </script>
    <style>
      /* *{
        outline: 1px solid green;
      } */
      table,
      th,
      td {
        border-collapse: collapse;
        border: 1px solid;
      }
      #dataFilters{
        width: 48%
      }
      #fieldBoxes{
        height: 20dvh;
        margin-bottom: 10px;
      }
      #graph{
        margin-top: -19dvh;
        margin-left: 50%;
      }
    </style>
  </head>
  <body onload="load_boxes();">
    <button onclick="window.location.href='/'">Back</button>
    <div id="fieldBoxes">
      <fieldset id="dataFilters">
        <legend>Filters</legend>
        <label for="lSalary">Low Salary &gt;</label>
        <input
          type="number"
          name="lSalary"
          id="lSalary"> <br>
        <label for="hSalary">High Salary &lt;</label>
        <input
          type="number"
          name="hSalary"
          id="hSalary">
        <br>
        <label for="isRemote">Show Remote</label>
        <input
          type="checkbox"
          name="isRemote"
          id="isRemote">
        <br/>
        <!-- Posted on or after -->
        <label for="posted_on">Posted After</label>
        <input
          type="date"
          name="posted_on"
          id="posted_on">
        <br>

        <!-- Posted on or before -->
        <label for="posted_before">Posted Before</label>
        <input
          type="date"
          name="posted_before"
          id="posted_before">
        <br>

        <!-- Keywords -->
        <label for="keywords">Search Terms (Seperate by comma)</label>
        <input type="text" name="keywords" id="keywords">
        <br>

        <button onclick="filterData()">Filter</button>
      </fieldset>
      <div id="graph"></div>
    </div>

    <table id="data_table">
      <tr>
        <th>Company Name</th>
        <th>Location</th>
        <th>Date Posted</th>
        <th>View</th>
      </tr>
      {% for row in data %}
        <tr>
          <td>{{ row[0] }}</td>
          <td>{{ row[1] }}</td>
          <td>{{ row[2] }}</td>
          <td>
            <a href="/expand/{{row[3]}}">View</a>
          </td>
        </tr>
      {% endfor %}
    </table>
  </body>

</html>